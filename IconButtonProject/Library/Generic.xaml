<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="clr-namespace:HitachiHighTech.LS.GUI">


    <!--<Style TargetType="{x:Type local:IconButton}">-->
    <Style TargetType="{x:Type local:IconButton}">
        <Setter Property="Background" Value="LightGray"/>
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="IconFill" Value="Black"/>
        <Setter Property="IconStroke" Value="Black"/>
        <Setter Property="StrokeThickness" Value="2"/>
        <Setter Property="BorderBrush" Value="Black"/>
        <Setter Property="BorderThickness" Value="2"/>
        <Setter Property="Width" Value="100"/>
        <Setter Property="Height" Value="100"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:IconButton}">
                    <Border x:Name="border"
      
                              Background="{TemplateBinding ButtonBackground}"
                              CornerRadius="{TemplateBinding CornerRadius}"
                              BorderBrush="{TemplateBinding BorderBrush}"
                              BorderThickness="{TemplateBinding BorderThickness}">

                        <StackPanel  x:Name="iconAndTextPanel"
                                Orientation="Horizontal"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center">   
                            <!-- Icon -->
                            <Path x:Name="iconPath"
                                Data="{TemplateBinding IconGeometry}" 
                                Fill="{TemplateBinding IconFill}"
                                Stroke="{TemplateBinding IconStroke}"
                                StrokeThickness="{TemplateBinding StrokeThickness}"
                                Stretch="Uniform" 
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"/>

                            <!-- Button Text -->
                            <TextBlock x:Name="buttonName" Text="{TemplateBinding Text}" 
                                 Foreground="{TemplateBinding Foreground}" 
                                 HorizontalAlignment="Center"
                                 />
                        </StackPanel>
                    </Border>

                    <ControlTemplate.Triggers>

                        <!-- Trigger to make icon occupy full space when Text is empty -->
                        <Trigger Property="Text" Value="">
                            <Setter TargetName="buttonName" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="iconPath" Property="VerticalAlignment" Value="Stretch"/>
                            <Setter TargetName="iconPath" Property="HorizontalAlignment" Value="Stretch"/>
                            <Setter TargetName="iconPath" Property="Margin" Value="0"/>
                        </Trigger>

                        <!-- Icon Alignment Trigger -->
                        <Trigger Property="IconAlignment" Value="IconOnTop">
                            <Setter Property="Orientation" TargetName="iconAndTextPanel" Value="Vertical"/>
                            <Setter Property="Margin" TargetName="iconAndTextPanel" Value="0,5,0,0"/>
                            <Setter Property="Margin" TargetName="buttonName" Value="0,5,0,0"/>
                        </Trigger>
                        <Trigger Property="IconAlignment" Value="IconOnLeft">
                            <Setter Property="Orientation" TargetName="iconAndTextPanel" Value="Horizontal"/>
                            <Setter Property="Margin" TargetName="iconAndTextPanel" Value="0,0,0,5"/>
                            <Setter Property="Margin" TargetName="buttonName" Value="0,0,0,5"/>
                        </Trigger>


                        <!--<Trigger Property="IsMouseDown" Value="True">
                            <Setter TargetName="border" Property="Background" Value="{Binding PressedBackground,RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter Property="BorderBrush" Value="White"/>
                            <Setter Property="IconFill" Value="DarkBlue"/>
                            <Setter Property="IconStroke" Value="DarkBlue"/>
                            <Setter Property="Foreground" Value="DarkBlue"/>
                        </Trigger>-->


                        <!--<Trigger Property="IsMouseDown" Value="False">
                            <Setter Property="Background" Value="{Binding ButtonBackground,RelativeSource={RelativeSource TemplatedParent}}"/>
                            <Setter TargetName="border" Property="BorderBrush" Value="Black"/>
                            <Setter Property="IconFill" Value="Black"/>
                            <Setter Property="IconStroke" Value="Black"/>
                            <Setter Property="Foreground" Value="Black"/>
                        </Trigger>-->

                        <!--<Trigger Property="IsMouseDown" Value="True">
                            <Setter Property="ButtonBackground" Value="Pink"/>
                            <Setter Property="BorderBrush" Value="DarkBlue"/>
                            <Setter Property="IconFill" Value="DarkBlue"/>
                            <Setter Property="IconStroke" Value="DarkBlue"/>
                            <Setter Property="Foreground" Value="DarkBlue"/>
                        </Trigger>-->

                        <!--<Trigger Property="IsMouseDown" Value="True">
                            <Setter TargetName="border" Property="Background" Value="pink"/>
                            <Setter Property="BorderBrush" Value="DarkBlue"/>
                            <Setter TargetName="iconPath" Property="Fill" Value="DarkBlue"/>
                            <Setter TargetName="iconPath" Property="Stroke" Value="DarkBlue"/>
                            <Setter TargetName="buttonName" Property="Foreground" Value="DarkBlue"/>
                        </Trigger>-->

                        <!--<Trigger Property="IsMouseDown" Value="True">
                            <Setter Property="ButtonBackground" Value="Pink"/>
                            <Setter Property="BorderBrush" Value="DarkBlue"/>
                            <Setter Property="Foreground" Value="white"/>
                        </Trigger>-->


                        <!--<Trigger Property="IsMouseDown" Value="False">
                            <Setter TargetName="border" Property="Background" Value="LightGreen"/>
                            <Setter TargetName="border" Property="BorderBrush" Value="Black"/>
                            <Setter Property="IconFill" Value="Black"/>
                            <Setter Property="IconStroke" Value="Black"/>
                            <Setter Property="Foreground" Value="Black"/>
                        </Trigger>-->




                        <!-- Hover State -->
                        <!--<MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="border" Property="Background" Value="Darkblue"/>
                            <Setter TargetName="border" Property="BorderBrush" Value="White"/>
                            <Setter TargetName="iconPath" Property="Fill" Value="White"/>
                            <Setter TargetName="iconPath" Property="Stroke" Value="White"/>
                            <Setter TargetName="buttonName" Property="Foreground" Value="White"/>
                        </MultiTrigger>-->


                        <!-- EventTrigger for MouseDown -->
                        <EventTrigger RoutedEvent="MouseDown">
                            <BeginStoryboard>
                                <Storyboard>
                                    <ColorAnimation Storyboard.TargetName="border" 
                                                Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)"
                                                To="Teal" Duration="0:0:0.1"/>
                                    <ColorAnimation Storyboard.TargetName="iconPath" 
                                                Storyboard.TargetProperty="(Path.Fill).(SolidColorBrush.Color)"
                                                To="DarkBlue" Duration="0:0:0.1"/>
                                    <ColorAnimation Storyboard.TargetName="buttonName" 
                                                Storyboard.TargetProperty="(TextBlock.Foreground).(SolidColorBrush.Color)"
                                                To="DarkBlue" Duration="0:0:0.1"/>
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>

                        <!-- EventTrigger for MouseUp -->
                        <!--<EventTrigger RoutedEvent="MouseUp">
                            <BeginStoryboard>
                                <Storyboard>
                                    <ColorAnimation Storyboard.TargetName="border" 
                                                Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)"
                                                To="LightGray" Duration="0:0:0.1"/>
                                    <ColorAnimation Storyboard.TargetName="iconPath" 
                                                Storyboard.TargetProperty="(Path.Fill).(SolidColorBrush.Color)"
                                                To="Black" Duration="0:0:0.1"/>
                                    <ColorAnimation Storyboard.TargetName="buttonName" 
                                                Storyboard.TargetProperty="(TextBlock.Foreground).(SolidColorBrush.Color)"
                                                To="Black" Duration="0:0:0.1"/>
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>-->




                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="Background" Value="{Binding HoverBackground,RelativeSource={RelativeSource TemplatedParent}}"/>
                            <Setter TargetName="border" Property="BorderBrush" Value="White"/>
                            <Setter TargetName="iconPath" Property="Fill" Value="White"/>
                            <Setter TargetName="iconPath" Property="Stroke" Value="White"/>
                            <Setter TargetName="buttonName" Property="Foreground" Value="White"/>
                        </Trigger>

                        <!-- Disabled State -->
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="border" Property="Background" Value="Gray"/>
                            <Setter TargetName="border" Property="BorderBrush" Value="DarkGray"/>
                            <Setter Property="Foreground" Value="DarkGray"/>
                            <Setter Property="IconFill" Value="DarkGray"/>
                            <Setter Property="IconStroke" Value="DarkGray"/>
                            <Setter Property="Opacity" Value="0.5"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>

            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>
